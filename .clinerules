# C++ コーディング規約

## 基本方針

### 例外とRTTIの禁止
- 例外機能（try-catch）を使用しないこと
- RTTI（dynamic_cast, typeid）を使用しないこと
- エラーハンドリングは `s6i_result::Result` を使用すること
- `noexcept` 指定子は不要

### メンバ変数の命名規則
- メンバ変数は `m_` プレフィックスを付けること
  ```cpp
  class Example {
  private:
      int m_count = 0;
      std::string m_name;
  };
  ```

### メンバ変数は定義時に初期化
- メンバ変数が定義時に初期化できる場合は、コンストラクタ構文で初期化すること
  ```
  class Example {
  private:
    int m_value = 10;
    std::string* m_name = nullptr;
  };
  ```

## リソース管理

### RAIIの原則
- リソースの確保は初期化時に行い、解放はデストラクタで自動的に行うこと
- スコープベースのリソース管理を徹底すること
- 例:
  - ファイルハンドル
  - ミューテックス
  - メモリ確保/解放
  - その他システムリソース

### ムーブセマンティクス
- リソースを保持するクラスはムーブセマンティクスを適切に実装すること
- Copy-and-swap Idiomを使用してムーブ代入演算子を実装すること
  ```cpp
  class Resource {
  public:
      // ムーブコンストラクタ
      Resource(Resource&& other)
          : resource_(other.m_resource) {
        other.m_resource = nullptr;
      }
      
      // ムーブ代入演算子
      Resource& operator=(Resource&& other) {
          Resource(std::move(other)).swap(*this);
          return *this;
      }
      
      // swap関数
      void swap(Resource& other) {
          using std::swap;
          swap(m_resource, other.m_resource);
      }
  private:
      ResourceType* m_resource = nullptr;
  };

  inline void swap(Resource& lhs, Resource& rhs) {
    lhs.swap(rhs);
  }
  ```

### エラーハンドリング
- エラーは `s6i_result::Result` を使用して表現すること
- 失敗する可能性のある操作は必ず `Result` で包むこと
- 例外を使用せず、戻り値でエラーを表現すること
